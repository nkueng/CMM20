#pragma once

#include <optLib/ConstrainedObjectiveFunction.h>

// setting up custom objective class for SQPMinimizer adjusting virtual methods to our use-case in RobotControl
class SQPobjective : public ConstrainedObjectiveFunction {
	// allow RobotControl to set protected members (b, d, and f)
	friend class RobotControl;
public:
	// constructor
	SQPobjective(SQPMinimizer* a) : minimizer(a) {}

	// regularizer used in evaluate()
	double log_c_reg = -3.; double log_c_reg_min = -9.; double log_c_reg_max = -1.;

	// evaluates the objective of the minimization
	virtual double evaluate(const dVector& p) const { 

		double O = 0.;

		// objective
		O += 10 * (A_obj * p - b_obj).squaredNorm();
		// std::cout << "evaluate: O = " << O << std::endl;

		// regularizer
		O += pow(10., log_c_reg) * p.squaredNorm();
		return O;
	}

	// computes equality constraints (see goal)
	virtual const dVector& getEqualityConstraintValues(const dVector& p) {

		// get (sparse) A matrix from minimizer
		Matrix A = Matrix(minimizer->A);

		// DEBUG
	    // std::cout << "getEqualityConstraintValues: The matrix A is of size " << A.rows() << "x" << A.cols() << std::endl;
	    // std::cout << A << std::endl;

		// multiply A with p
		Ap = A * p;

		return Ap;
	}

	// computes inequality constraints, e.g., torque limit on joints
	virtual const dVector& getInequalityConstraintValues(const dVector& p) {
		// TODO: return C(p)  of d <= C(p) <= f

		// get (sparse) C matrix from minimizer
		Matrix C = Matrix(minimizer->C);

		// DEBUG
	    // std::cout << "getInequalityConstraintValues: The matrix C is of size " << C.rows() << "x" << C.cols() << std::endl;
	    // std::cout << C << std::endl;

		// multiply C with p
		Cp = C * p;

		return Cp;
	}

	void setObjectiveMatrixAndTargetVector(const Matrix& A, const dVector& b) {

		A_obj = A;
		b_obj = b;
		// DEBUG
		// std::cout << "Function setObjectiveMatrixAndTargetVector in SQObjective is called." << std::endl;
	}

	// TODO: make use of prepareForOptimizationStep() to precompute quantities

	// reference to solver to pass matrices for constraints
	SQPMinimizer* minimizer;

	// member objects for intermediate results passed as references
	dVector Ap;
	dVector Cp;

	// member objects for evaluation of objective generated by RobotControl class
	Matrix A_obj;
	dVector b_obj;
};	
